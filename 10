module ff_modified #(
    parameter WIDTH = 4
) (
    input clk, rst,
    input logic [WIDTH-1:0] data_i,
    output logic [WIDTH-1:0] data_o
);
    logic [WIDTH-1:0] data_d1, data_q1;
    logic [WIDTH-1:0] data_d2, data_q2;
    logic [WIDTH-1:0] data_d3, data_q3;
    logic [WIDTH-1:0] data_d, data_q;

    assign data_o = data_q3; // Output from the third flip-flop

    // First flip-flop
    always_comb begin : data_set1
        data_d1 = data_i;
    end

    always_ff @(posedge clk or posedge rst) begin : data_ff1
        if (rst) begin
            data_q1 <= '0;
        end else begin
            data_q1 <= data_d1;
        end
    end

    // Second flip-flop
    always_ff @(posedge clk or posedge rst) begin : data_ff2
        if (rst) begin
            data_d2 <= '0;
        end else begin
            data_d2 <= data_q1; // Input from the first flip-flop
        end
    end

    always_ff @(posedge clk or posedge rst) begin : data_ff3
        if (rst) begin
            data_q2 <= '0;
        end else begin
            data_q2 <= data_d2;
        end
    end

    // Third flip-flop
    always_ff @(posedge clk or posedge rst) begin : data_ff4
        if (rst) begin
            data_d3 <= '0;
        end else begin
            data_d3 <= data_q2; // Input from the second flip-flop
        end
    end

    always_ff @(posedge clk or posedge rst) begin : data_ff5
        if (rst) begin
            data_q3 <= '0;
        end else begin
            data_q3 <= data_d3;
        end
    end
endmodule

